program -> statement
newlineSeparator -> \n

factor -> identifier
factor -> constant
factor -> (`arithmeticExpression`)
factor -> arrayAccessExpression

term -> factor
term -> factor`*`term 
term -> factor`/`term
term -> factor`%`term

arithmeticExpression -> term
arithmeticExpression -> term`+`arithmeticExpression
arithmeticExpression -> term`-`arithmeticExpression


negation -> !

booleanOperator -> &&
booleanOperator -> ||

booleanTerm -> identifier
booleanTerm -> booleanConstant
booleanTerm -> (`booleanExpression`)
booleanTerm -> negation`identifier
booleanTerm -> negation`booleanConstant
booleanTerm -> negation`(`booleanExpression`)

relationalOperator -> <
relationalOperator -> <=
relationalOperator -> ==
relationalOperator -> >
relationalOperator -> >=
relationalOperator -> !=

booleanExpression -> booleanTerm
booleanExpression -> booleanTerm`booleanOperator`booleanExpression
booleanExpression -> arithmeticExpression`relationalOperator`arithmeticExpression

expression -> arithmeticExpression
expression -> booleanExpression
expression -> arrayAccessExpression


readArgument -> identifier
readArgument -> arrayAccessExpression

writeArgument -> expression

ioStatement -> read`(`readArgument`)
ioStatement -> write`(`writeArgument`)
 
 
primitiveType -> Integer
primitiveType -> Character
primitiveType -> String
primitiveType -> Boolean

arrayType -> primitiveType`[`arithmeticExpression`]

type -> primitiveType
type -> arrayType

declarationStatement -> val`identifier`:`type


arrayAccessExpression -> identifier`[`arithmeticExpression`]


assignment -> =`expression

assignmentStatement -> identifier`assignment

initializationShorthandStatement -> declarationStatement`assignment


ifStatement -> if`(`booleanExpression`)`statement
ifStatement -> if`(`booleanExpression`)`statement`else`statement

whileStatement -> while`(`booleanExpression`)`statement

forStatement -> for`(`expression`to`expression`)`statement

controlFlowStatement -> ifStatement
controlFlowStatement -> whileStatement
controlFlowStatement -> forStatement


simpleStatement -> declarationStatement
simpleStatement -> assignmentStatement
simpleStatement -> initializationShorthandStatement 
simpleStatement -> controlFlowStatement
simpleStatement -> ioStatement

simpleStatementRepetition -> newlineSeparator`simpleStatement
simpleStatementRepetition -> simpleStatementRepetition`newlineSeparator`simpleStatement
simpleStatementSequence -> simpleStatement
simpleStatementSequence -> simpleStatement`simpleStatementRepetition

mixedStatementRepetition -> newlineSeparator`mixedStatement
mixedStatementRepetition -> mixedStatementRepetition`newlineSeparator`mixedStatement

compoundStatement -> {`mixedStatement`}
compoundStatement -> {`mixedStatement`mixedStatementRepetition`}

mixedStatement -> simpleStatement
mixedStatement -> compunedStatement

statement -> mixedStatement